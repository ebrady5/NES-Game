;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_InputPort1
	.import		_WaitFrame
	.export		_i
	.export		_player
	.export		_PALETTE
	.export		_TEXT
	.export		_TIME
	.export		_reset_scroll
	.export		_screen_on
	.export		_update_time
	.export		_input_handler
	.export		_main

.segment	"RODATA"

_PALETTE:
	.byte	$0F
	.byte	$20
	.byte	$20
	.byte	$20
_TEXT:
	.byte	$48
	.byte	$65
	.byte	$6C
	.byte	$6C
	.byte	$6F
	.byte	$20
	.byte	$57
	.byte	$6F
	.byte	$72
	.byte	$6C
	.byte	$64
_TIME:
	.byte	$30
	.byte	$3A
	.byte	$30
	.byte	$30

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"OAM"
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	2,$00
.segment	"OAM"
_player:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ reset_scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_scroll: near

.segment	"CODE"

;
; PPU_SCROLL = 0x00;
;
	lda     #$00
	sta     $2005
;
; PPU_SCROLL = 0x00;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ screen_on (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_on: near

.segment	"CODE"

;
; PPU_CTRL = 0x80; // 1000 0000, turns NMI on
;
	lda     #$80
	sta     $2000
;
; PPU_MASK = 0x1e; // 0001 1110, show sprites and background
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_time (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_time: near

.segment	"CODE"

;
; PPU_ADDRESS = NAMETABLE0_HIGH + 0x00; // top-right of screen
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = NAMETABLE0_LOW  + 0x59;
;
	lda     #$59
	sta     $2006
;
; for (i = 0; i < sizeof(TIME); ++i)
;
	lda     #$00
	sta     _i
	sta     _i+1
L0059:	lda     _i+1
	cmp     #$00
	bne     L0061
	lda     _i
	cmp     #$04
L0061:	bcs     L005A
;
; PPU_DATA = TIME[i];
;
	lda     #<(_TIME)
	sta     ptr1
	lda     #>(_TIME)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for (i = 0; i < sizeof(TIME); ++i)
;
	inc     _i
	bne     L0059
	inc     _i+1
	jmp     L0059
;
; }
;
L005A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ input_handler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_input_handler: near

.segment	"CODE"

;
; if (InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L007D
;
; if (player.y > MIN_Y + SPRITE_HEIGHT) {
;
	lda     _player
	cmp     #$11
	bcc     L007D
;
; --player.y;
;
	dec     _player
;
; if (InputPort1 & BUTTON_DOWN) {
;
L007D:	lda     _InputPort1
	and     #$04
	beq     L007E
;
; if (player.y < MAX_Y - SPRITE_HEIGHT) {
;
	lda     _player
	cmp     #$DF
	bcs     L007E
;
; ++player.y;
;
	inc     _player
;
; if (InputPort1 & BUTTON_LEFT) {
;
L007E:	lda     _InputPort1
	and     #$02
	beq     L007F
;
; if (player.x > MIN_X + SPRITE_HEIGHT) {
;
	lda     _player+3
	cmp     #$11
	bcc     L007F
;
; --player.x;
;
	dec     _player+3
;
; if (InputPort1 & BUTTON_RIGHT) {
;
L007F:	lda     _InputPort1
	and     #$01
	beq     L007A
;
; if (player.x < MAX_Y + SPRITE_HEIGHT) {
;
	lda     _player+3
	cmp     #$FF
	bcs     L007A
;
; ++player.x;
;
	inc     _player+3
;
; }
;
L007A:	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPU_ADDRESS = BG_PALETTE_HIGH;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = BG_PALETTE_LOW;
;
	lda     #$00
	sta     $2006
;
; for (i = 0; i < sizeof(PALETTE); ++i) // always use ++i, instead of i++
;
	sta     _i
	sta     _i+1
L0024:	lda     _i+1
	cmp     #$00
	bne     L002C
	lda     _i
	cmp     #$04
L002C:	bcs     L0025
;
; PPU_DATA = PALETTE[i];
;
	lda     #<(_PALETTE)
	sta     ptr1
	lda     #>(_PALETTE)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for (i = 0; i < sizeof(PALETTE); ++i) // always use ++i, instead of i++
;
	inc     _i
	bne     L0024
	inc     _i+1
	jmp     L0024
;
; update_time();
;
L0025:	jsr     _update_time
;
; reset_scroll();
;
	jsr     _reset_scroll
;
; player.x = MIN_X + 20;
;
	lda     #$14
	sta     _player+3
;
; player.y = MIN_Y + 20;
;
	sta     _player
;
; player.tile_index = PLAYER_TILE;
;
	lda     #$10
	sta     _player+1
;
; screen_on();
;
	jsr     _screen_on
;
; WaitFrame(); // wait for vblank/nmi handler in reset.s to trigger
;
L003C:	jsr     _WaitFrame
;
; reset_scroll();
;
	jsr     _reset_scroll
;
; input_handler();
;
	jsr     _input_handler
;
; while(1) {
;
	jmp     L003C

.endproc

