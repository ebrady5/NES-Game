;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_Frame_Number
	.import		_WaitFrame
	.export		_i
	.export		_tl
	.export		_tr
	.export		_bl
	.export		_br
	.export		_PALETTE
	.export		_SP_PALETTE
	.export		_ATTRIBUTES
	.export		_time_min
	.export		_time_sec_low
	.export		_time_sec_high
	.export		_reset_scroll
	.export		_screen_on
	.export		_update_time
	.export		_input_handler
	.export		_add_second
	.export		_draw_background
	.export		_main

.segment	"DATA"

_time_min:
	.byte	$00
_time_sec_low:
	.byte	$00
_time_sec_high:
	.byte	$00

.segment	"RODATA"

_PALETTE:
	.byte	$20
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$0C
	.byte	$27
	.byte	$37
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_SP_PALETTE:
	.byte	$21
	.byte	$0C
	.byte	$27
	.byte	$37
_ATTRIBUTES:
	.byte	$44
	.byte	$BB
	.byte	$44
	.byte	$BB

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"OAM"
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	2,$00
.segment	"OAM"
_tl:
	.res	4,$00
.segment	"OAM"
_tr:
	.res	4,$00
.segment	"OAM"
_bl:
	.res	4,$00
.segment	"OAM"
_br:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ reset_scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_scroll: near

.segment	"CODE"

;
; PPU_SCROLL = 0x00;
;
	lda     #$00
	sta     $2005
;
; PPU_SCROLL = 0x00;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ screen_on (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_on: near

.segment	"CODE"

;
; PPU_CTRL = 0x80; // 1000 0000, turns NMI on
;
	lda     #$80
	sta     $2000
;
; PPU_MASK = 0x1e; // 0001 1110, show sprites and background
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_time (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_time: near

.segment	"CODE"

;
; PPU_ADDRESS = NAMETABLE0_HIGH + 0x00; // top-right of screen
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = NAMETABLE0_LOW  + 0x59;
;
	lda     #$59
	sta     $2006
;
; PPU_DATA = NUMBER_0 + time_min;
;
	lda     _time_min
	clc
	adc     #$30
	sta     $2007
;
; PPU_DATA = 0x3a; // ':'
;
	lda     #$3A
	sta     $2007
;
; PPU_DATA = NUMBER_0 + time_sec_high;
;
	lda     _time_sec_high
	clc
	adc     #$30
	sta     $2007
;
; PPU_DATA = NUMBER_0 + time_sec_low;
;
	lda     _time_sec_low
	clc
	adc     #$30
	sta     $2007
;
; reset_scroll();
;
	jmp     _reset_scroll

.endproc

; ---------------------------------------------------------------
; void __near__ input_handler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_input_handler: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_second (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_second: near

.segment	"CODE"

;
; if (time_sec_low < 9)
;
	lda     _time_sec_low
	cmp     #$09
	bcs     L00C3
;
; ++time_sec_low;
;
	inc     _time_sec_low
;
; else if (time_sec_low == 9) {
;
	rts
L00C3:	lda     _time_sec_low
	cmp     #$09
	bne     L00BA
;
; time_sec_low = 0;
;
	lda     #$00
	sta     _time_sec_low
;
; if (time_sec_high < 5)
;
	lda     _time_sec_high
	cmp     #$05
	bcs     L00C4
;
; ++time_sec_high;
;
	inc     _time_sec_high
;
; else if (time_sec_high == 5) {
;
	rts
L00C4:	lda     _time_sec_high
	cmp     #$05
	bne     L00BA
;
; time_sec_high = 0;
;
	lda     #$00
	sta     _time_sec_high
;
; if (time_min < 9) 
;
	lda     _time_min
	cmp     #$09
	bcs     L00C5
;
; ++time_min;
;
	inc     _time_min
;
; else {
;
	rts
;
; time_min = 0;
;
L00C5:	lda     #$00
	sta     _time_min
;
; time_sec_high = 0;
;
	sta     _time_sec_high
;
; time_sec_low = 0;
;
	sta     _time_sec_low
;
; }
;
L00BA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_background: near

.segment	"CODE"

;
; reset_scroll();
;
	jmp     _reset_scroll

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPU_ADDRESS = BG_PALETTE_HIGH;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = BG_PALETTE_LOW;
;
	lda     #$00
	sta     $2006
;
; for (i = 0; i < sizeof(PALETTE); ++i) // always use ++i, instead of i++
;
	sta     _i
	sta     _i+1
L0041:	lda     _i+1
	cmp     #$00
	bne     L0049
	lda     _i
	cmp     #$20
L0049:	bcs     L0042
;
; PPU_DATA = PALETTE[i];
;
	lda     #<(_PALETTE)
	sta     ptr1
	lda     #>(_PALETTE)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for (i = 0; i < sizeof(PALETTE); ++i) // always use ++i, instead of i++
;
	inc     _i
	bne     L0041
	inc     _i+1
	jmp     L0041
;
; reset_scroll();
;
L0042:	jsr     _reset_scroll
;
; update_time();
;
	jsr     _update_time
;
; tl.x = MIN_X + 20;
;
	lda     #$14
	sta     _tl+3
;
; tl.y = MIN_Y + 20;
;
	sta     _tl
;
; tl.attributes = 0x00;
;
	lda     #$00
	sta     _tl+2
;
; tl.tile_index = 0x80;
;
	lda     #$80
	sta     _tl+1
;
; tr.x = MIN_X + 28;
;
	lda     #$1C
	sta     _tr+3
;
; tr.y = MIN_Y + 20;
;
	lda     #$14
	sta     _tr
;
; tr.attributes = 0x00;
;
	lda     #$00
	sta     _tr+2
;
; tr.tile_index = 0x81;
;
	lda     #$81
	sta     _tr+1
;
; bl.x = MIN_X + 20;
;
	lda     #$14
	sta     _bl+3
;
; bl.y = MIN_Y + 28;
;
	lda     #$1C
	sta     _bl
;
; bl.attributes = 0x00;
;
	lda     #$00
	sta     _bl+2
;
; bl.tile_index = 0x90;
;
	lda     #$90
	sta     _bl+1
;
; br.x = MIN_X + 28;
;
	lda     #$1C
	sta     _br+3
;
; br.y = MIN_Y + 28;
;
	sta     _br
;
; br.attributes = 0x00;
;
	lda     #$00
	sta     _br+2
;
; br.tile_index = 0x91;
;
	lda     #$91
	sta     _br+1
;
; screen_on();
;
	jsr     _screen_on
;
; WaitFrame(); // wait for vblank/nmi handler in reset.s to trigger
;
L0073:	jsr     _WaitFrame
;
; if (Frame_Number == 60) { // this runs once every second
;
	lda     _Frame_Number
	cmp     #$3C
	bne     L0078
;
; add_second();
;
	jsr     _add_second
;
; Frame_Number = 0;
;
	lda     #$00
	sta     _Frame_Number
;
; reset_scroll();
;
L0078:	jsr     _reset_scroll
;
; update_time();
;
	jsr     _update_time
;
; while(1) {
;
	jmp     L0073

.endproc

