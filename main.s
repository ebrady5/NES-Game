;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_index
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_Text_Position
	.export		_TEXT
	.export		_PALETTE
	.export		_screen_off
	.export		_screen_on
	.export		_load_palette
	.export		_reset_scroll
	.export		_load_text_increment
	.export		_main

.segment	"RODATA"

_TEXT:
	.byte	$44,$6F,$6E,$74,$20,$74,$65,$6C,$6C,$20,$6D,$65,$20,$49,$20,$63
	.byte	$61,$6E,$74,$20,$70,$62,$75,$69,$00
_PALETTE:
	.byte	$1F
	.byte	$00
	.byte	$10
	.byte	$20

.segment	"BSS"

.segment	"BSS"
_index:
	.res	1,$00
.segment	"BSS"
_NMI_flag:
	.res	1,$00
.segment	"BSS"
_Frame_Count:
	.res	1,$00
.segment	"BSS"
_Text_Position:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ screen_off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_off: near

.segment	"CODE"

;
; PPU_CTRL = 0; // set all bits to 0
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ screen_on (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_on: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // NMI on, bits = 1001 0000, this turns on NMI
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; // screen on, bits = 0001 1110, this turns on all graphics
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_palette: near

.segment	"CODE"

;
; PPU_ADDR = 0x3f; // set write address in the PPU to 0x3f00
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDR = 0x00;
;
	lda     #$00
	sta     $2006
;
; for (index = 0; index < sizeof(PALETTE); ++index){
;
	sta     _index
L0071:	lda     _index
	cmp     #$04
	bcs     L002F
;
; PPU_DATA = PALETTE[index]; // writes Palette data to 0x3f00, then increments
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for (index = 0; index < sizeof(PALETTE); ++index){
;
	inc     _index
	jmp     L0071
;
; reset_scroll();
;
L002F:	jmp     _reset_scroll

.endproc

; ---------------------------------------------------------------
; void __near__ reset_scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_scroll: near

.segment	"CODE"

;
; PPU_ADDR = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDR = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_text_increment (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_text_increment: near

.segment	"CODE"

;
; if (Text_Position < sizeof(TEXT)) {
;
	lda     _Text_Position
	cmp     #$19
	bcs     L0072
;
; PPU_ADDR = 0x21; // location address on the screen to write
;
	lda     #$21
	sta     $2006
;
; PPU_ADDR = 0xc5 + Text_Position;
;
	lda     _Text_Position
	clc
	adc     #$C5
	sta     $2006
;
; PPU_DATA = TEXT[Text_Position];
;
	ldy     _Text_Position
	lda     _TEXT,y
	sta     $2007
;
; ++Text_Position;
;
	inc     _Text_Position
;
; } else {
;
	jmp     _reset_scroll
;
; Text_Position = 0;
;
L0072:	lda     #$00
	sta     _Text_Position
;
; PPU_ADDR = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDR = 0xc5;
;
	lda     #$C5
	sta     $2006
;
; for (index = 0; index < sizeof(TEXT); ++index) {
;
	lda     #$00
	sta     _index
L0073:	lda     _index
	cmp     #$19
	bcs     L0065
;
; PPU_DATA = 0;
;
	lda     #$00
	sta     $2007
;
; for (index = 0; index < sizeof(TEXT); ++index) {
;
	inc     _index
	jmp     L0073
;
; reset_scroll();
;
L0065:	jmp     _reset_scroll

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; screen_off();
;
	jsr     _screen_off
;
; load_palette();
;
	jsr     _load_palette
;
; screen_on();
;
	jsr     _screen_on
;
; while (NMI_flag == 0);
;
L0074:	lda     _NMI_flag
	beq     L0074
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; if (Frame_Count == 30) {
;
	lda     _Frame_Count
	cmp     #$1E
	bne     L0074
;
; load_text_increment();
;
	jsr     _load_text_increment
;
; Frame_Count = 0;
;
	lda     #$00
	sta     _Frame_Count
;
; while (1) {
;
	jmp     L0074

.endproc

