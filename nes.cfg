# NES config file
# author: Robert Simari
# date: 2/22/18

# assigns the parts of memory we need to specific addresses on the NES hardware
MEMORY {

	# lays out all RAM addresses:

	# zero page, memory used for fast access because each address begins with 0x00 and it uses implicit addressing, this is the place for the most used variables in our code
	ZP: start = $00, size = $0100, type = rw;

	# sets up OAM memory for sprites on screen
	OAM: start = $0200, size = $0100, type = rw;

	# general purpose RAM for the game
	RAM: start = $0300, size = $0500, type = rw;

	# iNES header
	# header for the iNES emulator to tell it what hardware to emulate
	# fill = yes, means zero memory we dont use 
	HEADER: start = $0000, size = $0010, type = ro, fill = yes;

	# lays out all ROM addresses:

	# PRG is the memory for our program, our code
	PRG:  start = $8000, size = $3ffa, fill = yes, define = yes;

	# hardware vectors at end of the ROM, these are bytes that are set during things like a hardware interrupt including the NMI and reset
	VECTORS: start = $fffa, size = $0006, fill = yes;

	# CHR section for out pattern tables
	CHR: start = $0000, size = $2000, fill = yes;
}

# defines segments and maps them within our memory layout, if multiple are added to same memory area they are loaded in order
SEGMENTS {
	# load our header into the HEADER part of memory, read-only
	HEADER:  load = HEADER, type = ro;

	# load parts of our code into PRG section
	# bss means it is unitialized and the linker will make sure the memory is zero'd, it will be given value in the C code later
	# define = yes, this tells the linker to report the locations/sizes of the these segments in the variables __NAME_LOAD__, __NAME_RUN__, __NAME_SIZE__, where NAME is the actual name of the segment
	STARTUP: load = PRG,            type = ro, define = yes; # this is used by reset.s see __STARTUP__
	CODE:    load = PRG,            type = ro, define = yes;
	RODATA:  load = PRG,            type = ro, define = yes;
	DATA:    load = PRG, run = RAM, type = rw, define = yes; # run tells the hardware that even though the DATA will be in PRG it will be addressed by the RAM addresses.

	# load vectors into the vectors memory at the end of the ROM, read-only because the hardware sets these values and we only need to read the bytes to track things like the V-blank
	VECTORS: load = VECTORS,        type = ro;

	# load the CHR segments, read-only from our .chr files
	CHARS: load = CHR, type = ro;

	ZEROPAGE: load = ZP, type = zp; # type = zp, intializes this as a zeropage type segment
	BSS:      load = RAM, type = bss, define = yes; # unitialized segment, always define = yes, so we know where it is or else its useless
}

# defines key variables for C stack
SYMBOLS {
	# assigns the C stack to be the second page (256 bytes) of RAM
	__STACK_START__: type = weak, value = $0100; # weak means if we want we can redefine this value from the commandline if we want
	__STACK_SIZE__:  type = weak, value = $100; 
}